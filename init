#!/bin/bash
set -euo pipefail

ROOT="$( ( cd "$( dirname "$0" )" && pwd ) )"

[ -d "$ROOT/certs" ] || mkdir "$ROOT/certs"
[ -d "$ROOT/newcerts" ] || mkdir "$ROOT/newcerts"
[ -d "$ROOT/csr" ] || mkdir "$ROOT/csr"
[ -d "$ROOT/private" ] || mkdir "$ROOT/private"
chmod 700 "$ROOT/private"
[ -e "$ROOT/serial" ] || echo 1000 > "$ROOT/serial"
[ -e "$ROOT/index.txt" ] || touch "$ROOT/index.txt"

# https://jamielinux.com/docs/openssl-certificate-authority/create-the-root-pair.html

cat > "$ROOT/openssl.cnf" << EOF
[ ca ]
default_ca = CA_default

[ CA_default ]
dir               = $ROOT
certs             = \$dir/certs
crl_dir           = \$dir/crl
new_certs_dir     = \$dir/newcerts
database          = \$dir/index.txt
serial            = \$dir/serial
RANDFILE          = \$dir/private/.rand
private_key       = \$dir/private/ca.key.pem
certificate       = \$dir/certs/ca.cert.pem
crlnumber         = \$dir/crlnumber
crl               = \$dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30
default_md        = sha256
name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_strict

[ policy_strict ]
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_loose ]
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only
default_md          = sha256
x509_extensions     = v3_ca

[ req_distinguished_name ]
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name
emailAddress                    = Email Address
#countryName_default             = GB
#stateOrProvinceName_default     = England
#localityName_default            =
#0.organizationName_default      = Alice Ltd
#organizationalUnitName_default =
#emailAddress_default           =

[ v3_ca ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_intermediate_ca ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ usr_cert ]
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection

[ server_cert ]
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

[ crl_ext ]
authorityKeyIdentifier=keyid:always

[ ocsp ]
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning

EOF

if ! [ -e "$ROOT/private/ca.key.pem" ]; then
    openssl genrsa -out "$ROOT/private/ca.key.pem" 4096
fi

if ! [ -e "$ROOT/certs/ca.cert.pem" ]; then 
    openssl req \
        -config "$ROOT/openssl.cnf" \
        -subj "/C=DE/ST=Germany/L=Germany/CN=ca" \
        -key "$ROOT/private/ca.key.pem" \
        -new -x509 -days 7300 -sha256 -extensions v3_ca \
        -out "$ROOT/certs/ca.cert.pem"
fi

# openssl x509 -noout -text -in "$ROOT/certs/ca.cert.pem"





